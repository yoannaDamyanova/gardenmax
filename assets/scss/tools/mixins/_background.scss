//
// Background
//
@use 'sass:list';

@mixin make-background($color) {
  background-color: $color;
}

@mixin make-bg-colors($colors: $bg-colors, $breakpoints: $grid-breakpoints) {
  @each $key, $value in $colors {
    .#{$bg-prefix}-#{$key} {  @include make-background($value); }
    .#{$bg-prefix}-h-#{$key}:hover {  @include make-background($value); }
    .#{$bg-prefix}-a-#{$key}.active {  @include make-background($value); }
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @if(map-get($breakpoints, $breakpoint) > 0) {
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        @each $key, $value in $colors {
          $media: map-get($media-prefix, up);
          .#{$bg-prefix}-#{$media}#{$infix}-#{$key} { @include make-background($value); }
          .#{$bg-prefix}-h-#{$media}#{$infix}-#{$key}:hover { @include make-background($value); }
          .#{$bg-prefix}-a-#{$media}#{$infix}-#{$key}.active { @include make-background($value); }
        }
      }

      @if(map-get($breakpoints, $breakpoint) != list.nth(list.nth($grid-breakpoints, -1), 2)) {
        @include media-breakpoint-down($breakpoint, $breakpoints) {
          @each $key, $value in $colors {
            $media: map-get($media-prefix, down);
            .#{$bg-prefix}-#{$media}#{$infix}-#{$key} { @include make-background($value); }
            .#{$bg-prefix}-h-#{$media}#{$infix}-#{$key}:hover { @include make-background($value); }
            .#{$bg-prefix}-a-#{$media}#{$infix}-#{$key}.active { @include make-background($value); }
          }
        }
      }
    }

    @include media-breakpoint-only($breakpoint, $breakpoints) {
      @each $key, $value in $colors {
        $media: map-get($media-prefix, only);
        .#{$bg-prefix}-#{$media}#{$infix}-#{$key} { @include make-background($value); }
        .#{$bg-prefix}-h-#{$media}#{$infix}-#{$key}:hover { @include make-background($value); }
        .#{$bg-prefix}-a-#{$media}#{$infix}-#{$key}.active { @include make-background($value); }
      }
    }
  }
}

// Gradients

@mixin gradient-x($start-color: $gray-700, $end-color: $gray-800, $start-percent: 0%, $end-percent: 100%) {
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
}

@mixin gradient-y($start-color: $gray-700, $end-color: $gray-800, $start-percent: null, $end-percent: null) {
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
}

@mixin gradient-directional($start-color: $gray-700, $end-color: $gray-800, $deg: 45deg) {
  background-image: linear-gradient($deg, $start-color, $end-color);
}

@mixin gradient-x-three-colors($start-color: $blue, $mid-color: $purple, $color-stop: 50%, $end-color: $red) {
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
}

@mixin gradient-y-three-colors($start-color: $blue, $mid-color: $purple, $color-stop: 50%, $end-color: $red) {
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
}

@mixin gradient-radial($inner-color: $gray-700, $outer-color: $gray-800) {
  background-image: radial-gradient(circle, $inner-color, $outer-color);
}

@mixin gradient-striped($color: rgba($white, .15), $angle: 45deg) {
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}
